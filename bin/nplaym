#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var keypress = _interopDefault(require('keypress'));
var pty = _interopDefault(require('child_pty'));
var _ = _interopDefault(require('lodash'));
var colors = require('colors');
var child_process = require('child_process');

var HEIGHT = process.stdout.rows;
var WIDTH = process.stdout.columns;
var LEFTWALL = 10;
var RIGHTWALL = 10;
var MIDWIDTH = ~ ~(WIDTH / 2);
var MIDHEIGHT = ~ ~(HEIGHT / 2);
var FPS = 15;
var FRAMERATE = ~ ~(1000 / FPS);
var DIFFICULTY = 50; // out of 100
var STARTTIME = new Date().getTime();
var PLAYERLINE = ~ ~(HEIGHT / 4 + HEIGHT / 2);

// Terminal object
// Allows for controlling the terminal by outputting control characters
var terminal = {
    // Terminal escape character
    // escape_code: '\033',
    escape_code: '\x1B',

    // Display attributes reset
    // reset_code: '\033[0m',
    reset_code: '\x1B[0m',

    // Write a message in the terminal
    write: function write(message) {
        process.stdout.write(message);
        return this;
    },

    // Print one or more new line characters
    nl: function nl(n) {
        n = n || 1;
        for (var i = 0; i < n; i++) {
            process.stdout.write('\n');
        }
        return this;
    },

    // Move the terminal cursor
    move: function move(x, y) {
        x = x || 0;
        y = y || 0;

        var command = this.escape_code + '[';
        if (undefined !== x && 0 < x) {
            command += ++x;
        }
        if (undefined !== y && 0 < y) {
            command += ';' + ++y;
        }

        process.stdout.write(command + 'H');
        return this;
    },

    // Move the terminal cursor up `x` positions
    up: function up(x) {
        process.stdout.write(this.escape_code + '[' + x + 'A');
        return this;
    },

    // Move the terminal cursor down x positions
    down: function down(x) {
        process.stdout.write(this.escape_code + '[' + x + 'B');
        return this;
    },

    // Move the terminal cursor `p` positions right
    right: function right(p) {
        process.stdout.write(this.escape_code + '[' + p + 'C');
        return this;
    },

    // Move the terminal cursor `p` positions left
    left: function left(p) {
        process.stdout.write(this.escape_code + '[' + p + 'D');
        return this;
    },

    // Clear all characters from the terminal screen
    clear: function clear() {
        process.stdout.write(this.escape_code + '[2J' + this.escape_code + '[;H');
        return this;
    },

    // Clear the line the cursor is at
    clearLine: function clearLine() {
        process.stdout.write(this.escape_code + '[2K');
        return this;
    },

    // Clear the next `n` characters from the current cursor position.
    clearCharacters: function clearCharacters(n) {
        this.write(new Array(n + 2).join(' ')).left(n + 2);
        return this;
    },

    hideCursor: function hideCursor() {
        process.stdout.write(this.escape_code + '[?25l');
    },

    showCursor: function showCursor() {
        process.stdout.write(this.escape_code + '[?25h');
    }
};

var utils = {
  getRandom: function getRandom(arr) {
    return arr[~ ~(Math.random() * arr.length)];
  }
};

function Monster(text) {
  var _this = this;

  this.s = text;
  this.dangerZone = [];

  this.getPlacement = function () {
    var randomStart = ~ ~(Math.random() * (WIDTH - RIGHTWALL - LEFTWALL));
    randomStart = Math.min(randomStart, WIDTH - _this.s.length);
    randomStart = Math.max(randomStart, 0);
    return randomStart;
  };

  this.createDangerZone = function () {
    for (var i = this.left; i < this.left + this.s.length; i++) {
      this.dangerZone.push(i);
    }
  };

  Object.assign(this, {
    type: 'mob',
    up: 0,
    left: this.getPlacement(),
    colour: 'red',
    dead: false,
    colourIndex: 0
  });

  this.createDangerZone();
  this.tick = function () {
    _this.up = _this.up + 1;
    if (_this.dead) {
      _this.turnToDebris();
    }
    if (_this.up > HEIGHT) {
      _this.remove();
    }
  };
  this.turnToDebris = function () {
    var str = '';
    for (var i = 0; i < _this.s.length; i++) {
      var debrisChoices = ';,.`\'"'.split('');
      str += utils.getRandom(debrisChoices);
    }
    _this.s = str;
    var colourChoices = ['yellow', 'grey', 'black'];
    if (_this.colour !== 'black') {
      _this.colour = colourChoices[_this.colourIndex];
      _this.colourIndex++;
    } else {
      _this.remove();
    }
  };
  this.remove = function () {
    gameState.splice(gameState.indexOf(_this), 1);
  };
}

function Bullet(xCoord) {
  var _this2 = this;

  this.type = 'bullet';
  this.left = xCoord;
  this.s = '|';
  this.colour = 'magenta';
  this.up = PLAYERLINE - 1;
  this.speed = 2;
  this.tick = function () {
    _this2.up = _this2.up - 1;
    if (_this2.dead) {
      _this2.remove();
    }
  };
  this.dead = false;
  this.remove = function () {
    gameState.splice(gameState.indexOf(_this2), 1);
  };
}

var setting = void 0;
var args$1 = void 0;
var Parser = {};

Parser.set = function (terms) {
  var strippedTerms = _.clone(terms);
  _.remove(strippedTerms, function (i) {
    return (/^-/.test(i)
    );
  });
  if (strippedTerms[0] === 'install' || strippedTerms[0] === 'i') {
    if (strippedTerms.length === 1) {
      setting = 'npmInstall';
    } else {
      setting = 'npmInstallSomething';
    }
  } else {
    setting = 'default';
  }
  args$1 = strippedTerms;
};

Parser.parse = function (d) {
  switch (setting) {
    case 'npmInstall':
      var bits = d.toString().match(/:[a-zA-Z0-9\-_]+/);
      if (bits) {
        var packName = bits[0].slice(1);
        return packName;
      }
      return utils.getRandom(args$1);
      break;
    case 'npmInstallSomething':
      var moreBits = d.toString().match(/:[a-zA-Z0-9\-_]+/);
      if (moreBits) {
        var depName = moreBits[0].slice(1);
        return depName;
      }
      return args$1;
      break;
    default:
      var justLetters = d.toString().replace(/[^a-zA-Z0-9]+/g, '');
      var noColourCodes = justLetters.replace(/[\d]+m/, ' ');
      return noColourCodes;
      break;
  }
};

var args = process.argv.slice(2);

Parser.set(args);

var npmOutput = '';

var npm = pty.spawn('npm', args, {
  cwd: process.cwd()
});

var installingPackages = {};

function startListening() {
  npm.stdout.on('data', function (d) {
    var str = d.toString();
    if (str.length > 5) {
      npmOutput = str;
    }
    // We store it as keys in an object to quickly uniq them
    var output = Parser.parse(d);
    if (!output) {
      return;
    }
    var pkgs = void 0;
    if (typeof output === 'string') {
      pkgs = output.split(' ');
    } else {
      pkgs = output;
    }
    pkgs.forEach(function (pkg) {
      installingPackages[pkg] = 1;
    });
  });

  npm.stdout.on('end', function (d) {
    gameOver(true);
  });

  npm.on('close', function (d) {
    gameOver(true);
  });

  process.on('exit', function () {
    npm.kill('SIGINT');
    terminal.showCursor();
  });

  process.stdin.setRawMode(true);

  terminal.hideCursor();

  keypress(process.stdin);

  process.stdin.on('keypress', function (chunk, key) {
    if (!key) return;
    if (key.ctrl && key.name == 'c') {
      process.exit(1);
    }
    switch (key.name) {
      case 'left':
        terminal.right(1);
        player.left = Math.max(player.left - 1, LEFTWALL);
        break;
      case 'right':
        terminal.left(1);
        player.left = Math.min(player.left + 1, WIDTH - RIGHTWALL);
        break;
      case 'space':
        terminal.left(1);
        fire();
        break;
    }
  });
}

function paintScreen() {
  terminal.clear();

  for (var line = 0; line < HEIGHT; line++) {

    paintMovers(line);

    if (line === 1) {
      // Replace control chars, letters and numbers
      var out = npmOutput.replace(/[\x00-\x1F\x7F-\x9Fa-zA-Z0-9\?\[:\s]/g, '');
      var progressTxt = 'NPM: ' + out;
      terminal.write(progressTxt);
      terminal.left(progressTxt.length);
    }

    if (line === 2) {
      var scoreTxt = 'Score: ' + SCORE;
      terminal.write(scoreTxt);
      terminal.left(scoreTxt.length);
    }

    terminal.down(1);
  }

  gameState.filter(function (item) {
    return item.type === 'bullet' || item.type === 'mob';
  }).forEach(function (item) {
    item.tick();
  });
}

function cursorReturn(item) {
  terminal.left(item.left + item.s.length);
}

function getEntities(line) {
  return gameState.filter(function (item) {
    return item.up === line;
  }).sort(function (a, b) {
    return a.left > b.left;
  });
}

function paintMovers(line) {
  var entities = getEntities(line);
  var bulletsBelow = gameState.filter(function (item) {
    return item.up === line + 1 && item.type === 'bullet';
  });

  if (entities.length > 0) {
    entities.forEach(function (item) {
      terminal.right(item.left).write(item.s[item.colour]);
      cursorReturn(item);
    });
    checkBullet(entities.concat(bulletsBelow));
    if (line === PLAYERLINE) {
      checkIntersects(entities);
    }
  }
}

function writeCentre(msg, offset) {
  terminal.nl(MIDHEIGHT).write(msg).nl(MIDHEIGHT);
}

function startSequence(startGameFn) {
  var _loop = function _loop(i) {
    setTimeout(function () {
      var str = ' '.repeat(i) + '>'.blue;
      terminal.write(str);
      terminal.left(str.length);

      if (i === MIDWIDTH) {
        str = ' '.repeat(i) + '^'.blue;

        var _loop2 = function _loop2(j) {
          setTimeout(function () {
            terminal.clearLine().nl().write(str);

            if (j === PLAYERLINE - 1) {
              var _loop3 = function _loop3(k) {
                setTimeout(function () {
                  terminal.nl();
                  if (k === HEIGHT - PLAYERLINE - 1) {
                    startGameFn();
                  }
                }, 20 * k);
              };

              for (var k = 0; k < HEIGHT - PLAYERLINE; k++) {
                _loop3(k);
              }
            }
          }, 20 * j);
        };

        for (var j = 0; j < PLAYERLINE; j++) {
          _loop2(j);
        }
      }
    }, 10 * i);
  };

  // TODO: Sort out this callback cancer
  for (var i = 0; i < MIDWIDTH + 1; i++) {
    _loop(i);
  }
}

var SCORE = 0;
var ALIVE = true;
var LOOP = void 0;

var gameState = [{
  type: 'player',
  s: '^',
  up: PLAYERLINE,
  left: MIDWIDTH,
  colour: 'blue'
}];

var player = gameState[0];

function checkBullet(entities) {
  var bullets = entities.filter(function (i) {
    return i.type === 'bullet';
  });
  var mobs = entities.filter(function (i) {
    return i.type === 'mob';
  });
  var bulletsToGo = [];
  bullets.forEach(function (bullet, bi) {
    // console.log(item.left, dangerZone)
    mobs.forEach(function (mob, mi) {
      if (intersects(bullet.left, mob.dangerZone) && !bullet.dead && !mob.dead) {
        bullet.dead = true;
        bullet.colour = 'black';
        mob.s = 'x'.repeat(mob.s.length);
        mob.dead = true;
        mob.colour = 'yellow';
        addScore(mob.s.length);
      }
    });
  });
}

function checkIntersects(entities) {
  var playerPos = entities.find(function (item) {
    return item.type === 'player';
  }).left;
  var mobs = entities.filter(function (i) {
    return i.type === 'mob';
  });
  mobs.forEach(function (mob) {
    if (intersects(playerPos, mob.dangerZone) && !mob.dead) {
      ALIVE = false;
      setTimeout(gameOver, 1000);
    }
  });
}

function gameOver(win) {
  if (win) {
    writeCentre('You win! Packages installed! Your score was ' + SCORE + '.');
  } else {
    writeCentre('You lose! Give up, go home, and sell your keyboard on ebay.\nNo packages have been installed but then I\'m sure you\'ve got used to failure by now.\n\nYour score was ' + SCORE + '.');
  }
  process.exit(0);
}

function intersects(pos, dangerZone) {
  if (dangerZone.indexOf(pos) !== -1) {
    return true;
  }
  return false;
}

function generateMobs() {
  var packages = Object.keys(installingPackages);
  if (packages.length > 0 && Math.random() * 100 < DIFFICULTY) {
    var lastMsg = packages.pop();
    gameState.push(new Monster(lastMsg));
  }
}

function addScore(int) {
  SCORE = SCORE + int;
}

function startGame() {
  startSequence(function () {
    LOOP = interval(runLoop, FRAMERATE);
  });
}

function fire() {
  gameState.push(new Bullet(player.left));
}

function interval(func, wait, times) {
  var interv = function (w, t) {
    return function () {
      if (typeof t === "undefined" || t-- > 0) {
        setTimeout(interv, w);
        try {
          func.call(null);
        } catch (e) {
          t = 0;
          throw e.toString();
        }
      }
    };
  }(wait, times);

  setTimeout(interv, wait);
};

function runLoop() {
  if (ALIVE) {
    // term.clear();
    generateMobs();
    paintScreen();
  }
};

var npmVersion = parseInt(child_process.execSync('npm --version').toString());
if (npmVersion < 3) {
  console.log('This game only works properly with NPM 3, please consider upgrading!');
}

startListening();
startGame();